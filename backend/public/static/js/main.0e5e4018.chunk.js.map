{"version":3,"sources":["components/registrationForm/RegistrationForm.js","components/authorizationForm/AuthorizationForm.js","components/header/Header.js","components/updateFormButton/UpdateFormButton.js","components/task/Task.js","components/createTaskForm/CreateTaskForm.js","components/dropdownFilter/DropdownFilter.js","components/dropdownSort/DropdownSort.js","components/appMenu/AppMenu.js","App.js","serviceWorker.js","index.js"],"names":["RegistrationForm","react_default","a","createElement","Modal","trigger","Button","Header","Content","Form","Field","placeholder","type","id","AuthorizationForm","className","registrationForm_RegistrationForm","authorizationForm_AuthorizationForm","UpdateFormButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTask","obj","title","text","priority","completed","setState","changeTitleValue","changeDescriptionValue","handleChange","getUpdatedTask","_this$state","state","updatedTask","_id","task","updateTask","open","_this2","onClick","onChange","e","target","value","Radio","label","name","checked","floated","Component","Task","_ref","targetTask","tasks","getTaskId","deleteTask","map","Item","key","Icon","color","Description","Extra","date","Checkbox","updateFormButton_UpdateFormButton","CreateTaskForm","postState","getState","DropdownFilter","getValue","Dropdown","icon","floating","labeled","button","Menu","DropdownSort","changeSortDirection","AppMenu","dropdownFilter_DropdownFilter","dropdownSort_DropdownSort","createTaskForm_CreateTaskForm","App","filteredTasks","fetchData","_callee","data","regenerator_default","wrap","_context","prev","next","fetch","sent","json","stop","postData","_callee2","formData","time","options","res","_context2","Date","concat","getHours","getMinutes","getDay","getMonth","getFullYear","method","headers","Accept","Content-Type","body","JSON","stringify","console","log","deleteData","_callee3","_context3","filter","updateData","_callee4","_context4","arguments","length","undefined","tasksCopy","toConsumableArray","filteredTasksCopy","sort","b","reverse","completeChange","forEach","header_Header","appMenu_AppMenu","Group","task_Task","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e5e4018.chunk.js","sourcesContent":["import React from 'react';\r\nimport './registrationForm.css';\r\nimport { Button, Form, Modal } from 'semantic-ui-react';\r\n\r\nconst RegistrationForm = () => (\r\n    <Modal trigger={<Button>Sign Up</Button>} >\r\n        <Modal.Header>Sign Up</Modal.Header>\r\n        <Modal.Content>\r\n            <Form>\r\n                <Form.Field>\r\n                    <label>Login</label>\r\n                    <input placeholder='Login' />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Password</label>\r\n                    <input placeholder='Password' />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Confirm password</label>\r\n                    <input placeholder='Confirm password' />\r\n                </Form.Field>\r\n                <Button type='submit' id='registration-button'>Sign Up</Button>\r\n            </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n)\r\n\r\nexport default RegistrationForm ","import React from 'react';\r\nimport './authorizationForm.css';\r\nimport { Button, Form, Modal } from 'semantic-ui-react';\r\n\r\nconst AuthorizationForm = () => (\r\n    <Modal trigger={<Button>Sign In</Button>} >\r\n        <Modal.Header>Sign In</Modal.Header>\r\n        <Modal.Content>\r\n            <Form>\r\n                <Form.Field>\r\n                    <label>Login</label>\r\n                    <input placeholder='Login' />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Password</label>\r\n                    <input placeholder='Password' />\r\n                </Form.Field>\r\n                <Button type='submit' id='authorization-button'>Sign In</Button>\r\n            </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n)\r\n\r\nexport default AuthorizationForm","import React from 'react';\r\nimport './header.css';\r\nimport RegistrationForm from '../registrationForm/RegistrationForm';\r\nimport AuthorizationForm from '../authorizationForm/AuthorizationForm';\r\n\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header className='header-container'>\r\n            <h3 id='header-title'>TODO List</h3>\r\n            <div id='header-buttons'>\r\n                <RegistrationForm />\r\n                <AuthorizationForm />    \r\n            </div> \r\n        </header>\r\n    )\r\n}; \r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport { Button, Form, Modal, Radio } from 'semantic-ui-react';\r\n\r\nclass UpdateFormButton extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            title: '',\r\n            text: '',\r\n            priority: '',\r\n            completed: false,\r\n            open: false\r\n        }   \r\n    };\r\n    \r\n    getTask = (obj) => {\r\n        const {title, text, priority, completed} = obj;\r\n        this.setState({\r\n            title,\r\n            text,\r\n            priority,\r\n            completed\r\n        })\r\n    };\r\n\r\n    changeTitleValue = title => this.setState({title});\r\n    changeDescriptionValue = text => this.setState({text});\r\n    handleChange = priority =>  this.setState({priority});\r\n   \r\n    getUpdatedTask = () => {\r\n        const {title, text, priority, completed} = this.state;\r\n        const updatedTask = {\r\n            _id: this.props.task._id,\r\n            title,\r\n            text,\r\n            priority,\r\n            completed\r\n        };\r\n        this.props.updateTask(updatedTask)\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <Modal trigger={<Button onClick={() => {this.getTask(this.props.task); this.setState({open: true})} }>Edit</Button>} id='createtaskform-container' open={this.state.open}>\r\n                <Modal.Header>Cteate new task</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Title</label>\r\n                            <input\r\n                            onChange={e => this.changeTitleValue(e.target.value)}\r\n                            //placeholder='Title'\r\n                            value={this.state.title}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Description</label>\r\n                            <input\r\n                            onChange={e => this.changeDescriptionValue(e.target.value)}\r\n                            //placeholder='Description'\r\n                            value={this.state.text}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            Select task priority\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='Low'\r\n                            name='radioGroup'\r\n                            value='low'\r\n                            checked={this.state.priority === 'low'}\r\n                            onChange={() => this.handleChange('low')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='Medium'\r\n                            name='radioGroup'\r\n                            value='medium'\r\n                            checked={this.state.priority === 'medium'}\r\n                            onChange={() => this.handleChange('medium')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='High'\r\n                            name='radioGroup'\r\n                            value='high'\r\n                            checked={this.state.priority === 'high'}\r\n                            onChange={() => this.handleChange('high')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Button \r\n                            id='createtask-cancel-button' \r\n                            floated='right'\r\n                            onClick={() => this.setState({open: false})}\r\n                            >Cancel</Button>\r\n                            <Button \r\n                            type='submit' \r\n                            id='createtask-create-button' \r\n                            floated='right'\r\n                            onClick={this.getUpdatedTask}\r\n                            >Create</Button>          \r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )    \r\n    }\r\n} \r\n\r\n\r\nexport default UpdateFormButton ;\r\n\r\n\r\n","import React from 'react';\r\nimport UpdateFormButton from '../updateFormButton/UpdateFormButton';\r\nimport { Item, Icon, Button, Checkbox } from 'semantic-ui-react';\r\nimport './task.css';\r\n\r\nconst Task = ({targetTask, tasks, getTaskId, deleteTask, updateTask}) => {\r\n    return(\r\n        tasks.map((task) => {\r\n            return <Item id='task-container' key={task._id}>\r\n                <Item.Content id='task-content'>\r\n                   {task.completed && <span id='task-checked'><Icon color='green' name='check' /> Checked</span>} \r\n                    <Item.Description id='task-priority'>Priority: {task.priority}</Item.Description>\r\n                    <Item.Header id='task-title'>{task.title}</Item.Header> \r\n                    <Item.Description>{task.text}</Item.Description>\r\n                    <Item.Extra>{task.date}</Item.Extra>\r\n                    <Item.Extra id='task-buttons'>\r\n                        <Checkbox label='Completed'\r\n                        onChange={() => getTaskId(task._id)}\r\n                        />\r\n                        <UpdateFormButton\r\n                        id='task-updateformbutton'\r\n                        task = {task}\r\n                        targetTask = {targetTask}\r\n                        updateTask = {updateTask}\r\n                        />\r\n                        <Button\r\n                        floated='right'\r\n                        id='task-button-delete'\r\n                        onClick={() => deleteTask(task._id)}  \r\n                        >Delete</Button>\r\n                    </Item.Extra>\r\n                </Item.Content>\r\n            </Item>\r\n        }) \r\n    )\r\n} \r\n\r\nexport default Task","import React, {Component} from 'react';\r\nimport './createTaskForm.css';\r\nimport { Button, Form, Modal, Radio } from 'semantic-ui-react';\r\n\r\n\r\nclass CreateTaskForm extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            title: '',\r\n            text: '',\r\n            priority: '',\r\n            completed: false,\r\n            open: false\r\n        }   \r\n    };\r\n   \r\n    changeTitleValue = title => this.setState({title});\r\n    changeDescriptionValue = text => this.setState({text});\r\n    handleChange = priority =>  this.setState({priority});\r\n    postState = () => {\r\n        this.props.getState(this.state);\r\n        this.setState({open:false})\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <Modal trigger={<Button onClick={() => this.setState({open: true})}>New Task</Button>} id='createtaskform-container' open={this.state.open}>\r\n                <Modal.Header>Cteate new task</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Title</label>\r\n                            <input\r\n                            onChange={e => this.changeTitleValue(e.target.value)}\r\n                            placeholder='Title'\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Description</label>\r\n                            <input\r\n                            onChange={e => this.changeDescriptionValue(e.target.value)}\r\n                            placeholder='Description'\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            Select task priority\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='Low'\r\n                            name='radioGroup'\r\n                            value='low'\r\n                            checked={this.state.priority === 'low'}\r\n                            onChange={() => this.handleChange('low')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='Medium'\r\n                            name='radioGroup'\r\n                            value='medium'\r\n                            checked={this.state.priority === 'medium'}\r\n                            onChange={() => this.handleChange('medium')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='High'\r\n                            name='radioGroup'\r\n                            value='high'\r\n                            checked={this.state.priority === 'high'}\r\n                            onChange={() => this.handleChange('high')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Button \r\n                            id='createtask-cancel-button' \r\n                            floated='right'\r\n                            onClick={() => this.setState({open: false})}\r\n                            >Cancel</Button>\r\n                            <Button \r\n                            type='submit' \r\n                            id='createtask-create-button' \r\n                            floated='right'\r\n                            onClick={this.postState}\r\n                            >Create</Button>          \r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )    \r\n    }\r\n} \r\n\r\n\r\nexport default CreateTaskForm;","import React from 'react';\r\nimport { Dropdown} from 'semantic-ui-react';\r\nimport './dropdownFilter.css';\r\n\r\nconst DropdownFilter = ({getValue}) => {\r\n    return(\r\n        <Dropdown text='Priority filter' icon='filter' floating labeled button className='icon'>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item text='Show all tasks'  onClick={() => getValue('all')}/>  \r\n                <Dropdown.Item text='Show only tasks with low priority'  onClick={() => getValue('low')}/>\r\n                <Dropdown.Item text='Show only tasks with medium priority' onClick={() => getValue('medium')}/> \r\n                <Dropdown.Item text='Show only tasks with high priority' onClick={() => getValue('high')}/> \r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n} \r\n\r\nexport default DropdownFilter","import React from 'react';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport './dropdownSort.css';\r\n\r\nconst DropdownSort = ({changeSortDirection}) => {\r\n    return(\r\n        <Dropdown text='Sort by date' icon='filter' floating labeled button className='icon'>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item text='Sort' onClick={() => changeSortDirection()}/>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n} \r\n\r\nexport default DropdownSort","import React from 'react';\r\nimport CreateTaskForm from '../createTaskForm/CreateTaskForm';\r\nimport DropdownFilter from '../dropdownFilter/DropdownFilter';\r\nimport DropdownSort from '../dropdownSort/DropdownSort';\r\nimport './appMenu.css'\r\n\r\nconst AppMenu = ({getState, getValue, changeSortDirection}) => {\r\n    return(\r\n        <div id='menu-container'>\r\n            <DropdownFilter\r\n            getValue = {getValue}\r\n            />\r\n            <DropdownSort\r\n            changeSortDirection={changeSortDirection}\r\n            />\r\n            <CreateTaskForm \r\n            getState = {getState}\r\n            />\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default AppMenu","import React, { Component } from 'react';\r\nimport { Item} from 'semantic-ui-react';\r\nimport Header from './components/header/Header';\r\nimport Task from './components/task/Task';\r\nimport AppMenu from './components/appMenu/AppMenu';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    tasks: [],\r\n    filteredTasks: [],\r\n    targetTask: []\r\n  };\r\n  \r\n  fetchData = async () => {\r\n    const data = await fetch('http://192.168.0.103:3001/api/task');\r\n    const tasks = await data.json();\r\n    this.setState({\r\n      tasks\r\n    });\r\n  \r\n    this.getValue();\r\n  }; //app component\r\n\r\n  postData = async (formData) => {\r\n    const{title, text, priority, completed} = formData;\r\n    const time = new Date();\r\n    const date = `${time.getHours()}:${time.getMinutes()} ${time.getDay()}.${time.getMonth()}.${time.getFullYear()}`\r\n    const data = {\r\n      title,\r\n      text,\r\n      priority,\r\n      date,\r\n      completed \r\n    };\r\n    const options = {\r\n      method: 'post',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    };\r\n    const res = await fetch('http://192.168.0.103:3001/api/task', options);\r\n    console.log(res)\r\n    this.fetchData()\r\n  }; // createtaskform component\r\n\r\n  deleteData = async (id) => {\r\n    const task = this.state.tasks.filter( task => {\r\n      return task._id === id\r\n    });\r\n    const options = {\r\n      method: 'delete',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(task)\r\n    };\r\n    const res = await fetch('http://192.168.0.103:3001/api/task', options);\r\n    console.log(res)\r\n    this.fetchData()\r\n  }\r\n  \r\n  updateData = async (obj) => {\r\n    const options = {\r\n      method: 'put',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(obj)\r\n    };\r\n    const res = await fetch('http://192.168.0.103:3001/api/task', options);\r\n    console.log(res)\r\n    this.fetchData()\r\n  } \r\n\r\n  getValue = (value = 'all') => {\r\n    const tasksCopy = [...this.state.tasks];\r\n    if(value === 'all') {this.setState({filteredTasks: tasksCopy})\r\n      } else {\r\n      const filteredTasks = tasksCopy.filter( task => {\r\n        return task.priority === value\r\n      })\r\n      this.setState({filteredTasks})\r\n    }\r\n  } // handle filter by priority\r\n\r\n  changeSortDirection = () => {\r\n    const filteredTasksCopy = [...this.state.filteredTasks].sort((a, b) => a.date - b.date)\r\n    this.setState({filteredTasks: filteredTasksCopy.reverse()})\r\n  } // handle sort by date\r\n\r\n  completeChange = (id) => {\r\n    const tasksCopy = [...this.state.tasks];\r\n    tasksCopy.forEach((task) => {\r\n     if(task._id === id) task.completed = !task.completed;\r\n    });\r\n    this.setState({\r\n      tasks:tasksCopy\r\n    })\r\n  };  // task component\r\n \r\n  componentDidMount(){\r\n    this.fetchData()\r\n  };\r\n\r\n  render() {\r\n    const {filteredTasks, targetTask} = this.state\r\n    return (\r\n      <div className=\"App-container\">\r\n        <Header />     \r\n        <div className='tasks-container'>\r\n          <AppMenu\r\n          getState = {this.postData}\r\n          getValue = {this.getValue}\r\n          changeSortDirection={this.changeSortDirection}\r\n          />\r\n          <Item.Group>\r\n            <Task\r\n            targetTask = {targetTask}\r\n            tasks = {filteredTasks}\r\n            getTaskId = {this.completeChange}\r\n            deleteTask = {this.deleteData}\r\n            updateTask = {this.updateData}\r\n            />\r\n          </Item.Group>\r\n        </div>\r\n      </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}